
% Enter the names of your group members below.
% If you only have 2 group members, leave the last space blank
%
%%%%%
%%%%% NAME: Subha Tasnim
%%%%% NAME: Bemenet Bekele
%%%%% NAME: Michael Abd Elsayed
%
% Add your queries below. Please use the following format
% 
% %%%%% QUERY 2
% % EXPLANATION: Checks if there is a block on blockA
% on(X, blockA).
%
% where 2 is the number of the query. The EXPLANATION line should contain your explanation 
% in English of what the query tests. Omit the "%" on the line with the query
% Don't forget to end queries with a period.

%%%%%% QUERY 1
% EXPLANATION: checks if r1 can directly pass the ball to r2
canPass(r5, r6, 1).


%%%%%% QUERY 2
% EXPLANATION: Checks if r3 can score directly
canScore(r3, 1).


%%%%%% QUERY 3
% EXPLANATION: Checks if r1 can score with maximum of 2 steps
canScore(r1, 2).


%%%%%% QUERY 4
% EXPLANATION: Checks if r2 can score with maximum of 3 steps
canScore(r2, 3).


%%%%%% QUERY 5
% EXPLANATION: Checks if r1 can pass ball to r2 with maximum 5 steps
canPass(r1, r2, 5).


%%%%%% QUERY 6
% EXPLANATION: Checks of r4 can pass the ball to the net
canPass(r4, net, 3).


%%%%%% QUERY 7
% EXPLANATION: Checks if there is any robot that can pass to r1 with maximum 5 steps
canPass(R, r1, 5).


%%%%%% QUERY 8
% EXPLANATION: Checks if r1 can pass to any robot with maximum 3 steps
canPass(r1, R, 3).


%%%%%% QUERY 9
% EXPLANATION: Checks if there is any robot that can pass to another robot with maximum 5 steps
canPass(R1, R2, 5).


%%%%%% QUERY 10
% EXPLANATION: Checks if there is any robot that can score with maximum 4 steps
canScore(R, 4).



%%%%%% YOU MAY CHOOSE TO ADD MORE THAN 10 QUERIES HERE
%%%%%% HOWEVER, ONLY THE FIRST 10 WILL BE MARKED


%%%%% INTERACTION
%
% Add your interaction below.
% 
% ?- canPass(r5, r6, 1).
% Yes (0.00s cpu, solution 1, maybe more) ? ;
% No (0.00s cpu)
%
% ?- canScore(r3, 1).
% Yes (0.00s cpu, solution 1, maybe more) ? ;
% No (0.00s cpu)
% 
% ?- canScore(r1, 2).
% Yes (0.00s cpu, solution 1, maybe more) ? ;
% No (0.00s cpu)
% 
% ?- canScore(r2, 3).
% No (0.00s cpu)
% 
% ?- canPass(r1, r2, 5).
% Yes (0.00s cpu, solution 1, maybe more) ? ; % this one has repeating answers because there are many possible combinations
% Yes (0.00s cpu, solution 2, maybe more) ? 
% 
% ?- canPass(r4, net, 3).
% No (0.00s cpu)
% 
% ?- canPass(R, r1, 5).
% R = r2
% Yes (0.00s cpu, solution 1, maybe more) ? ; % this one has multiple answers because there are many possible solutions
% 
% R = r3
% Yes (0.00s cpu, solution 2, maybe more) ?
% 
% ?- canPass(r1, R, 3).
% R = r5
% Yes (0.00s cpu, solution 1, maybe more) ? ; % this one has multiple answers because there are many possible solutions
% 
% R = r2
% Yes (0.01s cpu, solution 2, maybe more) ?
% 
% ?- canPass(R1, R2, 5).
% R1 = r1
% R2 = r5
% Yes (0.00s cpu, solution 1, maybe more) ? ; % this one has multiple answers because there are many possible solutions
% 
% R1 = r2
% R2 = r1
% Yes (0.00s cpu, solution 2, maybe more) ?
% 
% ?- canScore(R, 4).
% R = r3
% Yes (0.00s cpu, solution 1, maybe more) ? ; % this one has multiple answers because there are many possible solutions
% 
% R = r1
% Yes (0.00s cpu, solution 2, maybe more) ?
%
